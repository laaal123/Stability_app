# -*- coding: utf-8 -*-
"""stability_study_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZNUgckXVXlpAMyBgFYf00pqHNpYgydEW
"""


# stability_study_app.py

# ‚úÖ Automatically check for missing modules
try:
    import streamlit
    import pandas
    import numpy
    import matplotlib
    import sklearn
    import openpyxl
    import reportlab
    import PyPDF2
    import docx
except ImportError as e:
    missing_module = str(e).split("No module named")[-1].strip().strip("'")
    import streamlit as st
    st.error(f"‚ùå Required module {missing_module} is not installed. Please install all dependencies.")
    st.stop()

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import tempfile
import os
import io
import re

# PDF generation
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image as PDFImage
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch
from reportlab.lib import colors

# Excel output
from openpyxl import Workbook
from openpyxl.drawing.image import Image as XLImage
from openpyxl.styles import PatternFill, Border, Side, Alignment, Font

# File parsing
from PyPDF2 import PdfReader
import docx

st.set_page_config(layout="wide")
st.title("üß™ Stability Study Report Generator (Excel + PDF Support)")

# --- File Upload ---
st.markdown("## üìÇ Upload File")
uploaded_file = st.file_uploader("Upload Excel, Word or PDF", type=["xlsx", "docx", "pdf"])
preloaded_data = {}
text_data = ""
param_data = []

# --- Parse Uploaded File ---
if uploaded_file is not None:
    file_ext = uploaded_file.name.split('.')[-1].lower()
    try:
        if file_ext == 'xlsx':
            xls = pd.ExcelFile(uploaded_file)
            preloaded_data = {sheet: xls.parse(sheet) for sheet in xls.sheet_names}
            for sheet_df in preloaded_data.values():
                if {'Parameter', 'Specification'}.issubset(sheet_df.columns):
                    param_data = sheet_df.fillna("").values.tolist()
            st.success(f"Excel file loaded with sheets: {', '.join(preloaded_data.keys())}")
        elif file_ext == 'docx':
            doc = docx.Document(uploaded_file)
            text_data = "\n".join([para.text for para in doc.paragraphs])
            st.info("Word file parsed (text preview below):")
            st.text_area("Extracted Text", text_data, height=150)
        elif file_ext == 'pdf':
            pdf = PdfReader(uploaded_file)
            text_data = "\n".join([page.extract_text() for page in pdf.pages if page.extract_text()])
            st.info("PDF parsed (text preview below):")
            st.text_area("Extracted Text", text_data, height=150)
    except Exception as e:
        st.error(f"Failed to parse file: {e}")

# --- Manual Table Input ---
st.markdown("## ‚úçÔ∏è Parameter Input Table")
def display_parameter_table():
    st.markdown("Enter Parameters Below:")
    default_rows = param_data if param_data else [["Assay", "95-105"]]
    param_input = st.data_editor(
        pd.DataFrame(default_rows, columns=["Parameter", "Specification"]),
        num_rows="dynamic",
        key="param_editor"
    )
    return param_input

edited_params = display_parameter_table()

# --- Export Options ---
st.markdown("---")
st.markdown("### üìÑ Export Reports")

# Excel export
excel_output = io.BytesIO()
wb = Workbook()
ws = wb.active
ws.title = "Stability Parameters"

# Header row
ws.append(["Parameter", "Specification"])
for row in edited_params.values.tolist():
    ws.append(row)
wb.save(excel_output)

st.download_button(
    label="üìä Download Excel Report",
    data=excel_output.getvalue(),
    file_name="stability_report.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

# PDF export
pdf_output = io.BytesIO()
doc = SimpleDocTemplate(pdf_output, pagesize=A4)
story = []
styles = getSampleStyleSheet()

story.append(Paragraph("Stability Study Report", styles['Title']))
story.append(Spacer(1, 12))

if edited_params is not None:
    story.append(Paragraph("Test Parameters", styles['Heading2']))
    story.append(Spacer(1, 6))
    table_data = [["Parameter", "Specification"]] + edited_params.values.tolist()
    tbl = Table(table_data, hAlign='LEFT')
    tbl.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.grey),
        ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
        ('ALIGN',(0,0),(-1,-1),'CENTER'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0,0), (-1,0), 12),
        ('GRID', (0,0), (-1,-1), 0.5, colors.black),
    ]))
    story.append(tbl)
else:
    story.append(Paragraph("No parameter data available.", styles['Normal']))

story.append(Spacer(1, 24))

if text_data:
    story.append(Paragraph("Extracted Text from File", styles['Heading2']))
    story.append(Spacer(1, 6))
    story.append(Paragraph(text_data.replace("\n", "<br/>"), styles['Normal']))

story.append(Spacer(1, 12))
doc.build(story)

st.download_button(
    label="üìÑ Download PDF Report",
    data=pdf_output.getvalue(),
    file_name="stability_study_report.pdf",
    mime="application/pdf"
)

st.markdown("---")
st.markdown("Built for Stability Analysis | Pharma Quality Tools")

