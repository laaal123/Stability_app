# -*- coding: utf-8 -*-
"""stability_study_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZNUgckXVXlpAMyBgFYf00pqHNpYgydEW
"""

# stability_study_app.py

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import tempfile
import os
import io
import re

# PDF generation
from reportlab.platypus import (
    SimpleDocTemplate,
    Paragraph,
    Spacer,
    Table,
    TableStyle,
    Image as PDFImage
)
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch
from reportlab.lib import colors

# Excel output
from openpyxl import Workbook
from openpyxl.drawing.image import Image as XLImage
from openpyxl.styles import PatternFill, Border, Side, Alignment, Font

# File parsing
from PyPDF2 import PdfReader
import docx

st.set_page_config(layout="wide")
st.markdown("## üìÇ Upload File")
uploaded_file = st.file_uploader("Upload Excel, Word or PDF", type=["xlsx", "docx", "pdf"])
preloaded_data = {}
text_data = ""

st.title("üß™ Stability Study Report Generator (Excel + PDF Support)")

# Parse uploaded file
if uploaded_file is not None:
    file_ext = uploaded_file.name.split('.')[-1].lower()
    try:
        if file_ext == 'xlsx':
            xls = pd.ExcelFile(uploaded_file)
            preloaded_data = {sheet: xls.parse(sheet) for sheet in xls.sheet_names}
            st.success(f"Excel file loaded with sheets: {', '.join(preloaded_data.keys())}")
        elif file_ext == 'docx':
            doc = docx.Document(uploaded_file)
            text_data = "\n".join([para.text for para in doc.paragraphs])
            st.info("Word file parsed (text preview below):")
            st.text_area("Extracted Text", text_data, height=150)
        elif file_ext == 'pdf':
            pdf = PdfReader(uploaded_file)
            text_data = "\n".join([page.extract_text() for page in pdf.pages if page.extract_text()])
            st.info("PDF parsed (text preview below):")
            st.text_area("Extracted Text", text_data, height=150)
    except Exception as e:
        st.error(f"Failed to parse file: {e}")

# Ensure download buttons always show
st.markdown("### üìÑ Export Options")
st.info("Use the buttons below to export Excel or PDF. Fill data or upload a file above to activate content.")

# Preview area
st.markdown("#### üëÅÔ∏è Preview Report Content")
if text_data:
    st.text_area("üìÑ Parsed Content Preview", text_data, height=300)
elif preloaded_data:
    for sheet, df in preloaded_data.items():
        st.markdown(f"**Sheet: {sheet}**")
        st.dataframe(df)
else:
    st.warning("No data to preview. Please upload a supported file.")

st.download_button(
    label="üìÑ Download PDF Report",
    data=b"",
    file_name="stability_report.pdf",
    mime="application/pdf",
    disabled=True
)
st.download_button(
    label="üìä Download Excel Report",
    data=b"",
    file_name="stability_report.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    disabled=True
)

# The rest of the code remains unchanged...
# (All previous logic related to form inputs, plots, Excel and PDF generation)



