# -*- coding: utf-8 -*-
"""stability_study_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZNUgckXVXlpAMyBgFYf00pqHNpYgydEW
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import io
from openpyxl import Workbook
from openpyxl.drawing.image import Image as XLImage
from openpyxl.styles import PatternFill, Border, Side, Alignment
import tempfile
import os

st.set_page_config(layout="wide")
st.title("ðŸ§ª Stability Study Report Generator")

# --- HEADER INPUTS ---
product_name = st.text_input("Product Name")
batch_number = st.text_input("Batch Number")
packaging_mode = st.text_input("Packaging Mode")
batch_size = st.text_input("Batch Size")

st.markdown("### âž• Add Stability Condition Data")

conditions = st.multiselect(
    "Select Stability Conditions:",
    ["25C_60RH", "30C_65RH", "40C_75RH"],
    default=["40C_75RH"]
)

# --- Timepoints ---
available_timepoints = ["Initial", "1M", "3M", "6M", "9M", "12M", "18M", "24M"]
selected_timepoints = st.multiselect("Select Timepoints to Include:", available_timepoints, default=available_timepoints)

# --- Manual Input Table for Each Condition ---
all_data = {}
chart_paths = []

def get_numeric(value):
    try:
        return float(''.join([s for s in value if s.isdigit() or s == '.']))
    except:
        return None

# Excel style elements
red_fill = PatternFill(start_color="FF9999", end_color="FF9999", fill_type="solid")
thin_border = Border(
    left=Side(style='thin'),
    right=Side(style='thin'),
    top=Side(style='thin'),
    bottom=Side(style='thin')
)

# --- Temporary directory for chart images ---
temp_dir = tempfile.mkdtemp()

for condition in conditions:
    st.markdown(f"### ðŸ“‹ Data for {condition}")
    default_params = ["Assay", "Dissolution", "Unknown Impurity", "Total Impurity"]
    param_input = st.text_area(
        f"Enter Parameters for {condition} (one per line)",
        value='\n'.join(default_params),
        key=f"param_input_{condition}"
    )
    param_names = [line.strip() for line in param_input.splitlines() if line.strip()]
    n_params = len(param_names)

    data = []
    for i in range(n_params):
        cols = st.columns(len(selected_timepoints) + 2)
        pname = cols[0].text_input("Parameter", value=param_names[i], key=f"p_{condition}_{i}")
        spec = cols[1].text_input("Specification", value="", key=f"s_{condition}_{i}")
        row = [pname, spec]
        for j, tp in enumerate(selected_timepoints):
            val = cols[j+2].number_input(tp, value=np.nan, format="%.4f", key=f"val_{condition}_{i}_{tp}")
            row.append(val)
        data.append(row)

    columns = ["Parameter", "Specification"] + selected_timepoints
    df = pd.DataFrame(data, columns=columns)
    all_data[condition] = df
    st.dataframe(df)

    for _, row in df.iterrows():
        pname = row["Parameter"]
        values = row[selected_timepoints].astype(float)
        if values.count() >= 2:
            times_numeric = np.array([i for i, val in enumerate(values) if not np.isnan(val)]).reshape(-1, 1)
            values_clean = np.array([val for val in values if not np.isnan(val)])
            model = LinearRegression().fit(times_numeric, values_clean)
            pred = model.predict(times_numeric)

            fig, ax = plt.subplots(figsize=(6, 3))
            ax.plot(selected_timepoints, row[selected_timepoints], marker='o', label='Observed')
            ax.plot(np.array(selected_timepoints)[~np.isnan(values)], pred, '--', label='Trendline', color='gray')

            spec_text = row['Specification']
            if pname.lower() == 'assay':
                try:
                    limits = [float(s) for s in spec_text.replace('%','').split('-')]
                    ax.axhline(limits[0], color='red', linestyle='--', label='Lower Spec')
                    ax.axhline(limits[1], color='red', linestyle='--', label='Upper Spec')
                except: pass
            elif pname.lower() == 'dissolution':
                try:
                    limit = get_numeric(spec_text)
                    if limit: ax.axhline(limit, color='orange', linestyle='--', label='NLT Spec')
                except: pass
            elif 'impurity' in pname.lower():
                try:
                    limit = get_numeric(spec_text)
                    if limit: ax.axhline(limit, color='purple', linestyle='--', label='NMT Spec')
                except: pass

            ax.set_title(f"{pname} - {condition}")
            ax.set_ylabel("Value")
            ax.set_xlabel("Time Point")
            ax.grid(True)
            ax.legend()
            st.pyplot(fig)

            chart_path = os.path.join(temp_dir, f"{condition}_{pname}.png")
            fig.savefig(chart_path)
            chart_paths.append((condition, pname, chart_path))

if st.button("ðŸ“¥ Download Full Excel Report"):
    excel_output = io.BytesIO()
    wb = Workbook()
    wb.remove(wb.active)

    for condition, df in all_data.items():
        ws = wb.create_sheet(title=condition)
        ws.append([f"Batch Number: {batch_number}", f"Packaging Mode: {packaging_mode}"])
        ws.append([])
        ws.append(list(df.columns))

        for i, row in df.iterrows():
            values = list(row)
            ws.append(values)
            row_num = ws.max_row
            try:
                spec_text = row['Specification']
                pname = row['Parameter'].lower()
                if pname == 'assay':
                    limits = [float(s) for s in spec_text.replace('%','').split('-')]
                    for j, tp in enumerate(selected_timepoints):
                        val = row[tp]
                        if not np.isnan(val) and (val < limits[0] or val > limits[1]):
                            ws.cell(row=row_num, column=3+j).fill = red_fill
                elif pname == 'dissolution':
                    limit = get_numeric(spec_text)
                    for j, tp in enumerate(selected_timepoints):
                        val = row[tp]
                        if not np.isnan(val) and val < limit:
                            ws.cell(row=row_num, column=3+j).fill = red_fill
                elif 'impurity' in pname:
                    limit = get_numeric(spec_text)
                    for j, tp in enumerate(selected_timepoints):
                        val = row[tp]
                        if not np.isnan(val) and val > limit:
                            ws.cell(row=row_num, column=3+j).fill = red_fill
            except:
                continue

        for row in ws.iter_rows():
            for cell in row:
                cell.border = thin_border
                cell.alignment = Alignment(wrap_text=True, vertical='center')

        for cond, pname, img_path in chart_paths:
            if cond == condition:
                ws.append([])
                ws.append([f"Chart for {pname}"])
                img = XLImage(img_path)
                img.width = 500
                img.height = 300
                ws.add_image(img, f"A{ws.max_row + 1}")

    wb.save(excel_output)
    st.download_button(
        label="ðŸ“¥ Download Excel with Data and Charts",
        data=excel_output.getvalue(),
        file_name=f"Stability_Study_Report_{batch_number}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

st.markdown("---")
st.markdown("Built for Stability Analysis | Pharma Quality Tools")

